{
	"name": "scd1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "scdcontactt1",
						"type": "DatasetReference"
					},
					"name": "adls"
				},
				{
					"dataset": {
						"referenceName": "azure_sql_scd",
						"type": "DatasetReference"
					},
					"name": "azuresql"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable6",
						"type": "DatasetReference"
					},
					"name": "updateddatascdsink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable7",
						"type": "DatasetReference"
					},
					"name": "insertscd1ds"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Name as string,",
				"          Contact as string,",
				"          Gmail as string,",
				"          Address as string,",
				"          Pincode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> adls",
				"source(output(",
				"          E_ID as integer,",
				"          E_Name as string,",
				"          E_Contact as string,",
				"          E_Gmail as string,",
				"          E_Address as string,",
				"          E_Pincode as string,",
				"          E_HashKey as binary,",
				"          Modified_Date as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> azuresql",
				"adls derive(Modified_Date = currentUTC(),",
				"          Hash_Code = toBinary(md5(Contact+Gmail+Address))) ~> derivedColumn1",
				"derivedColumn1, azuresql join(ID == E_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(!isNull(E_ID)&& notEquals(Hash_Code,E_HashKey),",
				"     isNull(E_ID),",
				"     disjoint: false) ~> split1@(matched, unmatched)",
				"split1@matched alterRow(updateIf(true())) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          E_ID as integer,",
				"          E_Name as string,",
				"          E_Contact as string,",
				"          E_Gmail as string,",
				"          E_Address as string,",
				"          E_Pincode as string,",
				"          E_HashKey as binary,",
				"          Modified_Date as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['E_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          E_ID = ID,",
				"          E_Name = Name,",
				"          E_Contact = Contact,",
				"          E_Gmail = Gmail,",
				"          E_Address = Address,",
				"          E_Pincode = Pincode,",
				"          E_HashKey = Hash_Code,",
				"          Modified_Date = split1@matched@Modified_Date",
				"     )) ~> updateddatascdsink1",
				"split1@unmatched sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          E_ID as integer,",
				"          E_Name as string,",
				"          E_Contact as string,",
				"          E_Gmail as string,",
				"          E_Address as string,",
				"          E_Pincode as string,",
				"          E_HashKey as binary,",
				"          Modified_Date as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          E_ID = split1@unmatched@ID,",
				"          E_Name = split1@unmatched@Name,",
				"          E_Contact = split1@unmatched@Contact,",
				"          E_Gmail = split1@unmatched@Gmail,",
				"          E_Address = split1@unmatched@Address,",
				"          E_Pincode = split1@unmatched@Pincode,",
				"          E_HashKey = Hash_Code,",
				"          Modified_Date = split1@unmatched@Modified_Date",
				"     )) ~> insertscd1ds"
			]
		}
	}
}