{
	"name": "scd2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "scd2_src",
						"type": "DatasetReference"
					},
					"name": "adlssrc1"
				},
				{
					"dataset": {
						"referenceName": "src2_scd2",
						"type": "DatasetReference"
					},
					"name": "asqlsrc2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable8",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable10",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "exists1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Name as string,",
				"          Contact as string,",
				"          Gmail as string,",
				"          Address as string,",
				"          Pincode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> adlssrc1",
				"source(output(",
				"          E_ID as integer,",
				"          E_Name as string,",
				"          E_Contact as string,",
				"          E_Gmail as string,",
				"          E_Address as string,",
				"          E_Pincode as string,",
				"          E_HashKey as binary,",
				"          Modified_Date1 as timestamp,",
				"          IS_Active as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> asqlsrc2",
				"adlssrc1 derive(Modified_Date = currentUTC(),",
				"          Is_Active = 1,",
				"          Hash_Code = toBinary(md5(Gmail+Contact+Address))) ~> derivedColumn1",
				"asqlsrc2 derive(is_active = 0,",
				"          snk_hash_code = toBinary(md5(E_Gmail+E_Contact+E_Address))) ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 exists(hex(Hash_Code) ==hex(E_HashKey),",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"derivedColumn2 filter(asqlsrc2@IS_Active==1) ~> filter1",
				"filter1, derivedColumn1 exists(ID==E_ID && Hash_Code != E_HashKey,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2 alterRow(updateIf(1==1)) ~> alterRow1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          E_ID as integer,",
				"          E_Name as string,",
				"          E_Contact as string,",
				"          E_Gmail as string,",
				"          E_Address as string,",
				"          E_Pincode as string,",
				"          E_HashKey as binary,",
				"          Modified_Date1 as timestamp,",
				"          IS_Active as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          E_ID = ID,",
				"          E_Name = Name,",
				"          E_Contact = Contact,",
				"          E_Gmail = Gmail,",
				"          E_Address = Address,",
				"          E_Pincode = Pincode,",
				"          E_HashKey = Hash_Code,",
				"          Modified_Date1 = Modified_Date,",
				"          IS_Active = Is_Active",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          E_ID as integer,",
				"          E_Name as string,",
				"          E_Contact as string,",
				"          E_Gmail as string,",
				"          E_Address as string,",
				"          E_Pincode as string,",
				"          E_HashKey as binary,",
				"          Modified_Date1 as timestamp,",
				"          IS_Active as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['E_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          E_ID,",
				"          E_Name,",
				"          E_Contact,",
				"          E_Gmail,",
				"          E_Address,",
				"          E_Pincode,",
				"          Modified_Date1",
				"     )) ~> sink2"
			]
		}
	}
}